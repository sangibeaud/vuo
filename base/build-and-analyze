#!/usr/bin/env php
<?php

if ($argc < 5)
	die("usage: build-and-analyze <source root dir> <build root dir> <clang path> <compiler arguments>\n");

array_shift($argv);
$sourceDir = array_shift($argv);
$buildDir = array_shift($argv);
$clang = array_shift($argv);
$clangArgs = '';
foreach ($argv as $arg)
	if (strpos($arg, '"') !== FALSE
	 || strpos($arg, ' ') !== FALSE)
		// Add extra quotes, to keep the shell from removing the double-quotes and breaking on spaces.
		$clangArgs .= "'" . $arg . "' ";
	else
		$clangArgs .= $arg . ' ';


$runAnalyzers = true;
$skipRegexes = array(
	'@-x (objective-)?c(\+\+)?-header@', // Don't need to analyze precompiled headers.
	'@csgjs\.c@', // Not our code.
	'@empty\.c@',             // Nothing to analyze.
	'@empty\.cc@',            // Nothing to analyze.
	'@empty\.mm@',            // Nothing to analyze.
	'@miniz\.c@', // Not our code.
	'@VuoBase64\.cc@',  // Not our code.
	'@VuoBeatDetektor\.cc@',  // Not our code.
	'@VuoIoReturn\.c@',  // Nothing interesting.
	'@VuoOsStatus\.c@',  // Nothing interesting.
	'@VuoPnpId\.c@',  // Nothing interesting.
	'@VuoUrlParser\.c@', // Not our code.
	'@VuoUsbVendor\.c@',  // Nothing interesting.
	'@shared_mutex.cpp@', // Not our code.
	'@-o (VuoCompositionLoader|vuo-compile|vuo-link|vuo-export|vuo-debug|libVuoInputEditor.*\.dylib|Vuo(Runner)?.framework/Versions/.*?/Vuo(Runner)?|Vuo.app/Contents/MacOS/Vuo) @', // Just linking.
	'@-o Vuo.+\.o Vuo.+\.bc@', // Don't bother checking .bc -> .o conversions.
	'@mocs?_.+\.cpp@',
	'@qrc_.+\.cpp@',
);
foreach ($skipRegexes as $regex)
	if (preg_match($regex, $clangArgs))
	{
		$runAnalyzers = false;
		break;
	}


if ($runAnalyzers)
{
	$buildInfo = file_get_contents("$buildDir/conanbuildinfo.txt");
	$tag = '[includedirs]';
	$tagPos = strpos($buildInfo, $tag);
	$tagLen = strlen($tag);
	$includeDirs = '-isystem ' . implode(' -isystem ', explode("\n", trim(substr($buildInfo, $tagPos + $tagLen, strpos($buildInfo, '[libdirs]') - $tagPos - $tagLen))));

/*
	if (preg_match('/[A-Za-z]+\.c\b/', $clangArgs))
	{
		echo "\tsplint:\n";
		$splintCommand = "splint \
			-badflag \
			-fileextensions \
			-preproc \
			$clangArgs
		";

		squashPrecompiledHeaders($splintCommand, $sourceDir);

		system($splintCommand, $ret);
		if ($ret)
			echo 'Failed command: ' . $splintCommand;
exit(0);
	}
*/


	$stdcppRegex = '@(-I|-isystem )/Users/[^/]*/\.conan/data/llvm/[^/]*/vuo\+conan\+llvm/stable/package/[^/]*/include/c\+\+/v1@';
	$clangArgsMinusSTDCPP = preg_replace($stdcppRegex, '', $clangArgs);
	$includeDirsMinusSTDCPP = preg_replace($stdcppRegex, '', $includeDirs);


	$filenameRegex = '/ ([A-Za-z0-9.\/+_-]+\.(c|cc|cpp|m|mm))\b/';
	if (preg_match($filenameRegex, $clangArgs, $matches))
	{
		$filename = $matches[1];
		print "$filename:\n";
		$clangArgsMinusFilename = preg_replace($filenameRegex, '', $clangArgsMinusSTDCPP);
		$clangArgsMinusFilename = preg_replace('/-emit-llvm/', '$0.o', $clangArgsMinusFilename);

		echo "\toclint:\n";
		$oclintCommand = "oclint \
			-disable-rule AssignIvarOutsideAccessors \
			-disable-rule AvoidPrivateStaticMembers \
			-disable-rule BitwiseOperatorInConditional \
			-disable-rule CollapsibleIfStatements \
			-disable-rule ConstantConditionalOperator \
			-disable-rule DeepNestedBlock \
			-disable-rule EmptyCatchStatement \
			-disable-rule EmptyElseBlock \
			-disable-rule EmptyIfStatement \
			-disable-rule GotoStatement \
			-disable-rule HighCyclomaticComplexity \
			-disable-rule HighNPathComplexity \
			-disable-rule HighNcssMethod \
			-disable-rule InvertedLogic \
			-disable-rule LongLine \
			-disable-rule LongMethod \
			-disable-rule LongVariableName \
			-disable-rule ParameterReassignment \
			-disable-rule PreferEarlyExit \
			-disable-rule RedundantIfStatement \
			-disable-rule ShortVariableName \
			-disable-rule TooManyFields \
			-disable-rule TooManyParameters \
			-disable-rule UnnecessaryElseStatement \
			-disable-rule UnusedMethodParameter \
			-disable-rule UselessParentheses \
			$filename \
			-- \
			$clangArgsMinusFilename \
			$includeDirsMinusSTDCPP \
			-include $sourceDir/vuo.pch \
			2>&1 \
			| egrep -v \
				-e \"^$\" \
				-e \"^OCLint Report$\" \
				-e \"^Summary: \" \
				-e \"^\[OCLint .+\]$\" \
			|| true
		";

		squashPrecompiledHeaders($oclintCommand, $sourceDir);

		exec($oclintCommand, $output, $ret);
		if ($ret)
			echo 'Failed command: ' . $oclintCommand;

		foreach ($output as $line)
			print preg_replace('@.*/([^/]*:\d+:\d+:) (.*)@', '$1 warning: $2', $line) . "\n";
	}
	else
		die("error: couldn't find the filename in the clang args: $clangArgs\n");


	echo "\tclang analyzer:\n";
	$clangAnalyzerCommand = "gtimeout 10m \
		$clang \
		--analyze \
		-Xanalyzer -analyzer-output=html \
		-Xanalyzer -analyzer-eagerly-assume \
		-Xanalyzer -analyzer-opt-analyze-nested-blocks \
		-Xanalyzer -analyzer-checker=alpha,core,deadcode,llvm,osx,security,unix \
		$clangArgs \
		-o $filename.d \
		2>&1 \
		| grep -E -v \
			-e \"^$\" \
		|| true
	";

	system($clangAnalyzerCommand, $ret);
	if ($ret)
		echo 'Failed command: ' . $clangAnalyzerCommand;


	echo "\tinfer:\n";
	$inferCommand = "gtimeout 10m \
		/usr/local/bin/infer \
		--no-progress-bar \
		--cxx \
		--headers \
		--keep-going \
		--pulse \
		--scheduler callgraph \
		--report-blacklist-path-regex '/Users/.+/\.conan/data/.+' \
		--report-blacklist-path-regex '/usr/local/Cellar/.+' \
		--report-blacklist-path-regex '/Applications/Xcode\.app/.+' \
		--report-blacklist-path-regex '.+/llvm\.framework/.+' \
		--report-blacklist-path-regex '.+/infer-osx-v.+/.+' \
		--results-dir $buildDir/infer \
		-- $clang $clangArgsMinusSTDCPP \
		$includeDirsMinusSTDCPP \
		-I$sourceDir/library \
		2>&1 \
		| grep -E -v \
			-e \"^Capturing in make/cc mode\" \
			-e \"^Building call graph\" \
			-e \"^Built call graph in\" \
			-e \"^Finished call graph scheduling\" \
			-e \"^ *[A-Za-z ]+\([A-Z_]+\): (\d+|#)$\" \
			-e \"^$\" \
			-e \"^Found \d+ source files?\" \
			-e \"^Found \d+ issue\" \
	";

	// https://github.com/facebook/infer/issues/8
	$inferCommand .= " | pcregrep -Mv 'DEAD_STORE(.|\\n)*?VuoDeferScopeVar(.|\\n)*?>.*?(VuoDefer|VuoLocal).*?(\\n\\s+\\d+\\..*){2}'";

	// https://github.com/facebook/infer/issues/1031
	$inferCommand .= " | pcregrep -Mv 'CXX_REFERENCE_CAPTURED_IN_OBJC_BLOCK(.|\\n)*?>.*?dispatch_sync.*?(\\n\\s+\\d+\\..*){2}'";
	$inferCommand .= " | pcregrep -Mv 'CXX_REFERENCE_CAPTURED_IN_OBJC_BLOCK(.|\\n)*?>.*?getNextLine.*?(\\n\\s+\\d+\\..*){2}'";

	// macOS overcommits, so we don't care about malloc returning NULL.
	$inferCommand .= " | pcregrep -Mv 'NULL_DEREFERENCE(.|\\n)*?(malloc|calloc|strdup)(.|\\n)*?>.*?(\\n\\s+\\d+\\..*){2}'";

	// False positive: it's not possible for std::vector to be NULL.
	$inferCommand .= " | pcregrep -Mv 'NULL_DEREFERENCE(.|\\n)*?.*pointer.*__begin_.*last assigned on line.*could be null.*(\\n\\s+\\d+\\..*){5}'";

	// Ignore failures within Infer.
	$inferCommand .= " | pcregrep -Mv 'Stack dump:(.|\\n)*'";

	$inferCommand .= " ||true";

	squashPrecompiledHeaders($inferCommand, $sourceDir);

	system($inferCommand, $ret);
	if ($ret)
		echo 'Failed command: ' . $inferCommand;
}


if ($runAnalyzers)
echo "\tclang:\n";
$clangCommand = "set -o pipefail ; $clang $clangArgs \
	2>&1 \
	| grep -E -v \
		-e \"clang: warning: .*: 'linker' input unused\" \
	|| true";
system($clangCommand, $ret);
if ($ret)
{
	echo 'Failed command: ' . $clangCommand;
	exit($ret);
}


function squashPrecompiledHeaders(&$command, $sourceDir)
{
	// Disable the precompiled header, since infer's version of clang doesn't support precompiled headers from Vuo's version of clang.
	$command = preg_replace('@-include-pch .*/pch/VuoPCH.*\.pch@', "-include $sourceDir/vuo.pch", $command);
}
